name: Build, Publish, and Release .NET Desktop App

on:
  workflow_dispatch: # Allows manual triggering
  push:
    tags:
      - 'v*' # Trigger only on versioned tags (e.g., v1.0.0)

jobs:
  build-publish-release:
    runs-on: windows-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Setup .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.x' # Ensure this matches the target framework of your project

      # Step 3: Restore dependencies
      - name: Restore Dependencies
        run: dotnet restore
        shell: pwsh

      # Step 4: Build the solution
      - name: Build Solution
        run: dotnet build --configuration Release --no-restore
        shell: pwsh

      # Step 5: Run tests (if applicable)
      - name: Run Tests
        run: dotnet test --no-build --verbosity normal
        shell: pwsh

      # Step 6: Publish application
      - name: Publish Application
        run: dotnet publish -c Release -o ./output
        shell: pwsh

      # Step 7: Package build artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: application-build
          path: ./output

      # Step 8: Check for Existing Release
      - name: Check for Existing Release
        id: check_release
        run: |
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} \
          | jq -r '.id // empty' > release_id.txt
          echo "::set-output name=release_id::$(cat release_id.txt)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

      # Step 9: Create GitHub Release (if it doesn't exist)
      - name: Create GitHub Release
        if: steps.check_release.outputs.release_id == ''
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          body: |
            Automated release for build ${{ github.ref_name }}.
          draft: false
          prerelease: false

      # Step 10: Upload Artifacts to Release
      - name: Upload Artifacts to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url || 'https://uploads.github.com/repos/' + github.repository + '/releases/' + steps.check_release.outputs.release_id + '/assets' }}
          asset_path: ./output
          asset_name: "application.zip"
          asset_content_type: application/zip
